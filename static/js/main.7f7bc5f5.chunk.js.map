{"version":3,"sources":["Counter/Counter.jsx","App.js","reportWebVitals.js","index.js"],"names":["Counter","useState","counterValue","setCounterValue","inputValue","setInputValue","data-testid","className","onClick","type","value","onChange","e","parseInt","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAyBeA,MAtBf,WAEC,MAAwCC,mBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAoCF,mBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAQA,OACC,gCACC,oBAAIC,cAAY,SAAhB,wBACA,oBAAIA,cAAY,UAAUC,UAAS,UAAKL,GAAc,IAAK,QAAQ,IAAhC,OAAqCA,IAAiB,IAAK,MAAM,IAApG,SAA2GA,IAC3G,wBAAQI,cAAY,SAASE,QAPF,WAC5BL,EAAgBD,EAAeE,IAM9B,eACA,uBAAOE,cAAY,QAAQG,KAAK,SAASC,MAAON,EAAYG,UAAU,cAAcI,SAAU,SAACC,GAAD,OAAOP,EAAcQ,SAASD,EAAEE,OAAOJ,WACrI,wBAAQF,QAbW,WACpBL,EAAgBD,EAAeE,IAYCE,cAAY,SAA3C,mBCLYS,MATf,WACE,OACE,qBAAKR,UAAU,MAAf,SAEE,cAAC,EAAD,OCESS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7f7bc5f5.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './Counter.css';\r\n\r\nfunction Counter() {\r\n\r\n const [counterValue, setCounterValue] = useState(0);\r\n const [inputValue, setInputValue] = useState(1);\r\n const addtoCounter = () => {\r\n  setCounterValue(counterValue + inputValue);\r\n }\r\n\r\n  const subtractfromCounter = () => {\r\n  setCounterValue(counterValue - inputValue);\r\n }\r\n return (\r\n  <div>\r\n   <h3 data-testid=\"header\">My Counter</h3>\r\n   <h2 data-testid=\"counter\" className={`${counterValue>=100? \"green\":\"\"}${counterValue <= -100? \"red\":\"\"}`}>{counterValue}</h2>\r\n   <button data-testid=\"subBtn\" onClick={subtractfromCounter}>-</button>\r\n   <input data-testid=\"input\" type=\"number\" value={inputValue} className=\"text-center\" onChange={(e) => setInputValue(parseInt(e.target.value))}/>\r\n   <button onClick={addtoCounter} data-testid=\"addBtn\">+</button>\r\n  </div>\r\n )\r\n}\r\n\r\nexport default Counter\r\n","\nimport './App.css';\nimport Counter from './Counter/Counter'\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     \n      <Counter/>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}